{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    'col',
    content.field_grid[0]['#paragraph'].get('field_grid_mobile').value,
    content.field_grid[0]['#paragraph'].get('field_grid_tablet').value,
    content.field_grid[0]['#paragraph'].get('field_grid_desktop').value,
    content.field_grid[0]['#paragraph'].get('field_grid_ldesktop').value,
  ]
%}

{% set count_pictures = paragraph.field_pictures_pictures | length %}

{% if (count_pictures > 3)  %}
   {% set classes_container_picture = 'col s12 m4 xl3' %}
   {% set style_name = 'product_picture_gallery' %}
{% else %}
   {% set classes_container_picture = 'col s12 m' ~ 12/count_pictures %}
   {% set style_name = 'product_picture_col_' ~ count_pictures %}
{% endif %}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    <div class="row">
      {% block content %}
        {% for key, picture in content.field_pictures_pictures if key|first != '#' %}  
   
          {% set picture_settings = picture['#settings'] | merge({ 'style_name' : style_name }) %}
          {% set picture = picture | merge({'#settings' : picture_settings}) | merge({'#attached' : content.field_pictures_pictures['#attached']}) %}
     
          <div class="center img-container {{ classes_container_picture }}">
            {{ picture }} 
          </div>

        {% endfor %}

        {% if content.field_description[0] %}
          <div class="center">
            {{ content.field_description }}
          </div>
        {% endif %}

      {% endblock %}
    </div>
  </div>
{% endblock paragraph %}
